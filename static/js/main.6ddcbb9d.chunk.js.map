{"version":3,"sources":["Components/Head/head.js","Components/ImageGetter/IG.js","Components/Image/Image.js","Components/Palette/Palette.js","App.js","serviceWorker.js","index.js"],"names":["Head","props","react_default","a","createElement","className","style","color","concat","col","val","IG","_ref","onInpCh","onSubmit","onChange","type","placeholder","onClick","IMAGE","URL","Border","border","alt","width","height","src","Palette","value","key","backgroundColor","margin","borderRadius","lib","text","particlesProps","particles","number","density","enable","value_area","app","Clarifai","App","apiKey","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","input","target","_this$state","state","b","Colors","Url","models","predict","COLOR_MODEL","then","resp","rawData","outputs","data","colors","cols","console","log","particles_default","params","Head_head","Components_ImageGetter_IG","Image_Image","map","obj","i","Components_Palette_Palette","raw_hex","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6ddcbb9d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './head.css';\r\nconst Head=(props)=>{\r\n    return (\r\n        <div className='letter' style={{color:`${props.col}`}}>\r\n            {props.val}\r\n        </div>\r\n    );\r\n}\r\nexport default Head;","import React from 'react';\r\nimport './IG.css';\r\nconst IG=({onInpCh,onSubmit})=>{\r\n    return(\r\n        <div className='lm submit'>\r\n            <div>\r\n                Enter source of the image\r\n            </div>\r\n            <div>\r\n                <input onChange={onInpCh} className='marg' type='text' placeholder='URL'/>\r\n            </div>\r\n            <button onClick={onSubmit} className='marg grow'> \r\n                IMAGE \r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IG;","import React from 'react';\r\nimport './Image.css';\r\nconst IMAGE=({URL,Border})=>{\r\n    return(\r\n        <div className='ma lm' style={{border:`solid ${Border}`}}>\r\n            <img alt=\"\" style={{width:\"270px\",height:\"auto\"}} src={URL}/>\r\n        </div>\r\n    );\r\n}\r\nexport default IMAGE;","import React from 'react';\r\nimport './Palette.css'\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nconst Palette=({value,key})=>{\r\n    return(\r\n        <div className='Palette'>\r\n            <div style={{\r\n                backgroundColor:value,\r\n                height:'50%',\r\n                margin: '2px',\r\n                border:\"2px solid white\",\r\n                borderRadius:'5px'\r\n            }}>\r\n            </div>\r\n            <CopyToClipboard text={value}>\r\n                <button>HASH</button>\r\n            </CopyToClipboard>\r\n        </div>\r\n    );\r\n}\r\nexport default Palette;","import React from 'react';\nimport Head from './Components/Head/head';\nimport IG from './Components/ImageGetter/IG';\nimport Particles from \"react-particles-js\";\nimport IMAGE from'./Components/Image/Image';\nimport './App.css';\nimport Clarifai from 'clarifai';\nimport Palette from './Components/Palette/Palette' \nconst particlesProps={\n  particles:{\n    number:{\n      value: 20,\n      density: {\n        enable:true,\n        value_area:200\n      }\n    }\n  }\n}\nconst app = new Clarifai.App({\n  apiKey: '91497a9a068544fb8a8375437eedb7e7'\n });\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state={\n      input:\"\",\n      Url:\"\",\n      Border:\"Black\",\n      Colors:[]\n    }\n  }\n  onInpCh=(event)=>{\n    this.setState({input:event.target.value});\n    // console.log(this.state.Url);\n  }\n  onSubmit=()=>{\n    var {input,Colors}=this.state;\n    let b='black';\n    if(input!==''){\n      b='white';\n    }\n    this.setState({\n      Url:input,\n      Border:b\n    });\n    app.models.predict(Clarifai.COLOR_MODEL,input)\n    .then(resp=>resp.rawData.outputs[0])\n    .then(resp=>resp.data.colors)\n    .then((cols)=>{\n      console.log(cols);\n      this.setState({Colors:cols});\n    });\n    // console.log(this.state.Url);\n  }\n  render(){\n    var {Colors}=this.state;\n  return (\n      <div>\n        <Particles params={particlesProps} className=\"particles\"/>\n        <div>\n          <div className='start'>\n            <Head val=\"C\" col=\"purple\"/>\n            <Head val=\"O\" col=\"indigo\"/>\n            <Head val=\"L\" col=\"green\"/>\n            <Head val=\"D\" col=\"yellow\"/>\n            <Head val=\"E\" col=\"orange\"/>\n            <Head val=\"T\" col=\"red\"/>\n          </div>\n          <hr className='horz'/>\n        </div>\n        <div className='screen' style={{color:\"white\"}}>\n          <div className=\"lsec\">\n            <IG onInpCh={this.onInpCh} onSubmit={this.onSubmit}/>\n            <IMAGE URL={this.state.Url} Border={this.state.Border}/>\n          </div>\n          <div className=\"rsec\">\n            {\n              Colors.map((obj,i)=>{\n                return <Palette value={obj.raw_hex} key={obj.i}/>\n              })\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"tachyons\";\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}